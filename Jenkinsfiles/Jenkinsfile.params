pipeline {
    agent { label 'ubuntu-latest' }
    triggers { cron('H H * * *') }
    environment {
        USER_MAP="../internal-github-asana-utils/user_map.yml"
    }
    stages {
        stage('Setup parameters') {
            steps {
                script { 
                    properties([
                        parameters([
                            choice(
                                choices: ['TEST', 'PROD'], 
                                name: 'ENVIRONMENT'
                            )
                        ])
                    ])
                    
                    // Set environment variables based on ENVIRONMENT parameter
                    if (params.ENVIRONMENT == 'PROD') {
                        env.WINDOWS_BROWSER_BRANCH = 'develop'
                        env.EXTENSION_BRANCH = 'main'
                        env.PIXEL_SCHEMA_BRANCH = 'jmatthews/remove-stats'
                        env.ASANA_UTILS_BRANCH = 'main'
                        env.ASANA_PROJECT = "1210856607616307"
                    } else if (params.ENVIRONMENT == 'TEST') {
                        env.WINDOWS_BROWSER_BRANCH = 'jmatthews/automate-pixel-validation-5'
                        env.EXTENSION_BRANCH = 'jmatthews/automate-pixel-validation-3'
                        env.PIXEL_SCHEMA_BRANCH = 'jmatthews/remove-stats'
                        env.ASANA_UTILS_BRANCH = 'main'
                        env.ASANA_PROJECT = "1210584574754345"
                    }
                    
                    echo "Environment: ${params.ENVIRONMENT}"
                    echo "Windows Browser Branch: ${env.WINDOWS_BROWSER_BRANCH}"
                    echo "Extension Branch: ${env.EXTENSION_BRANCH}"
                    echo "Pixel Schema Branch: ${env.PIXEL_SCHEMA_BRANCH}"
                    echo "Asana Utils Branch: ${env.ASANA_UTILS_BRANCH}"
                    echo "Test Asana Project: ${env.ASANA_PROJECT}"
                }
            }
        }
        stage('clone pixel-schema repo ') {
            steps {
                dir('pixel-schema') {
                    checkout([$class: 'GitSCM', branches: [[name: "${env.PIXEL_SCHEMA_BRANCH}"]],
                    extensions: [[$class: 'LocalBranch']],
                    userRemoteConfigs: [[url: 'https://github.com/duckduckgo/pixel-schema.git']]])
                }
            }
        }
        stage('clone duckduckgo-privacy-extension repo ') {
            steps {
                dir('duckduckgo-privacy-extension') {
                    checkout([$class: 'GitSCM', branches: [[name: "${env.EXTENSION_BRANCH}"]],
                    extensions: [[$class: 'LocalBranch']],
                    userRemoteConfigs: [[url: 'https://github.com/duckduckgo/duckduckgo-privacy-extension.git']]])
                }
            }
        }
        stage('clone windows-browser repo with credentials') {
            steps {
                dir('windows-browser') {
                    checkout([$class: 'GitSCM', branches: [[name: "${env.WINDOWS_BROWSER_BRANCH}"]],
                    extensions: [[$class: 'LocalBranch']],
                    userRemoteConfigs: [[credentialsId: 'windows-browser-rw', url: 'https://github.com/duckduckgo/windows-browser.git']]])
                }
            }
        }
     
        stage('clone internal-github-asana-utils repo ') {
            steps {
                dir('internal-github-asana-utils') {
                    checkout([$class: 'GitSCM', branches: [[name: "${env.ASANA_UTILS_BRANCH}"]],
                    extensions: [[$class: 'LocalBranch']],
		    userRemoteConfigs: [[credentialsId: 'windows-browser-rw', url: 'https://github.com/duckduckgo/internal-github-asana-utils.git']]])
                }
            }
        }
        stage('Install ') {
             steps {
                sh '''#!/bin/bash
                    cd pixel-schema
                    fnm install
                    fnm exec npm ci
                    cd ..
                '''
            }
        }
        stage('Confirm settings ') {
             steps {
                sh '''#!/bin/bash
                    echo "Environment: $ENVIRONMENT"
                    echo "Windows Browser Branch: $WINDOWS_BROWSER_BRANCH"
                    echo "DDG Extension Branch: $EXTENSION_BRANCH"
                    echo "Pixel Schema Branch: $PIXEL_SCHEMA_BRANCH"
                    echo "Asana Utils Branch: $ASANA_UTILS_BRANCH"
                    echo "Asana Project: $ASANA_PROJECT"
                '''
            }
        }
        stage('Validate pixels for duckduckgo-privacy-extension'){
             steps {
                sh '''#!/bin/bash
                    MAIN_DIR="../duckduckgo-privacy-extension/pixel-definitions/"
                    cd pixel-schema
                    ./bin/validateRepo.sh $MAIN_DIR $USER_MAP $ASANA_PROJECT
                    cd ..
                '''
            }
        }
        stage('Validate pixels for windows-browser'){
             steps {
                sh '''#!/bin/bash
                    MAIN_DIR="../windows-browser/PixelDefinitions/"
                    cd pixel-schema
                    ./bin/validateRepo.sh $MAIN_DIR $USER_MAP $ASANA_PROJECT
                    cd ..
                '''
            }
        }
    }
   post {
        failure {
            sh '''#!/bin/bash
                source /etc/profile.d/perlbrew.sh
                export PERL5LIB=/usr/local/ddg/lib:$PERL5LIB  # /usr/local/ddg repo
                /usr/local/ddg/sysadmin/scripts/asana_create_task.pl \
                    --assignee jmatthews@duckduckgo.com \
                    --description "Jenkins pixel validation failed" \
                    --project_id $ASANA_PROJECT \
                    --no_duplicates \
                    "pixel validation failed"
            '''
        }
    }
}